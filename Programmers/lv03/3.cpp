#include "../test-prog.h"
#if (PNUM == lv03-3)

// 2 x N 타일링 문제

#include <iostream>

using namespace std;

// 시간초과 (n이 30만 되도 꽤걸림)
//long long cnt;
//void dfs(int n, int length) {
//    if (length > n) return;
//    if (length == n) {
//        cnt++;
//        return;
//    }
//    dfs(n, length + 1);
//    dfs(n, length + 2);
//}

/*
경우의 수를 보면

n = 1

=> 1

n = 2

2
11

=> 2

n = 3

1 1 1

2 1
1 2

=> 3

n = 4

1 1 1 1

2 1 1
1 2 1
1 1 2

2 2

=> 5

n = 5

1 1 1 1 1

2 1 1 1
1 2 1 1
1 1 2 1
1 1 1 2

2 2 1
2 1 2
1 2 2

=> 8

n = 6

1 1 1 1 1 1

2 1 1 1 1
1 2 1 1 1
1 1 2 1 1
1 1 1 2 1
1 1 1 1 2

2 2 1 1
2 1 2 1
2 1 1 2
1 2 1 2
1 1 2 2
1 2 2 1

2 2 2

=> 13

...

3을 만드는 모든 경우의 수는 (1 1 1, 2 1, 1 2)
2는 2와 1의 조합으로 이루어져 있다. (1 1, 2) => 2개
1은 1의 조합으로 이루어져 있다. (1) => 1개

2 + 1 => 3개
(1 1 1, (1 1) 1, (2) 1, 1 (1 1), 1 (2)) => (1 1 1은 중복) => (1 1 1, 2 1, 1 2)

4을 만드는 모든 경우의 수는 (3 1, 1 3, 1 1 1 1, 2 1 1, 1 2 1, 1 1 2, 2 2)
3은 위와같이 2와 1의 조합으로 (1 1 1, 2 1, 1 2)
2또한 위와같이 (1 1, 2)

3 + 2 => 5개
((1 1 1) 1, (2 1) 1, (1 2) 1, 1 (1 1 1), 1 (2 1), 1 (1 2), 1 1 1 1, (1 1) 1 1, (2) 1 1, 1 (1 1) 1, 1 (2) 1, 1 1 (1 1), 1 1 (2), (1 1)(1 1), (2)(1 1), (1 1)(2), (2)(2))
=> (3 1, 1 3, 1 1 1 1, 2 1 1, 1 2 1, 1 1 2, 2 2)

...

피보나치 수열과 동일

*/

int dp[60001];

int solution(int n) {
    dp[0] = 1; dp[1] = 1;
    for (int i = 2; i <= n; i++) {
        dp[i] = (dp[i - 2] + dp[i - 1]) % 1000000007;
    }
    return dp[n];
}

int main() {
    int n = 5;
    
    cout << solution(n);

    return 0;
}
#endif
